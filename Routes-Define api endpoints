// routes/authRoutes.js
const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const router = express.Router();

// Register a new user
router.post("/register", async (req, res) => {
  const { username, password, role } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    const user = await User.create({ username, password: hashedPassword, role });
    res.status(201).json({ message: "User registered", user });
  } catch (error) {
    res.status(500).json({ message: "Registration error", error });
  }
});

// Login an existing user
router.post("/login", async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = await User.findOne({ where: { username } });
    if (!user || !await bcrypt.compare(password, user.password)) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.json({ message: "Login successful", token });
  } catch (error) {
    res.status(500).json({ message: "Login error", error });
  }
});

module.exports = router;

// routes/internshipRoutes.js
const express = require("express");
const Internship = require("../models/Internship");

const router = express.Router();

// Create a new internship
router.post("/", async (req, res) => {
  const { title, description } = req.body;

  try {
    const internship = await Internship.create({ title, description });
    res.status(201).json({ message: "Internship created", internship });
  } catch (error) {
    res.status(500).json({ message: "Error creating internship", error });
  }
});

// Get all internships
router.get("/", async (req, res) => {
  try {
    const internships = await Internship.findAll();
    res.json(internships);
  } catch (error) {
    res.status(500).json({ message: "Error fetching internships", error });
  }
});

module.exports = router;
